<?php
/** 
 * TestLink Open Source Project - http://testlink.sourceforge.net/
 * This script is distributed under the GNU General Public License 2 or later. 
 *
 * @package 	  TestLink
 * @author      asimon
 * @copyright   2005-2012, TestLink community 
 * @filesource  reqCompareVersions.php
 * @link 		    http://www.teamst.org/index.php
 *
 * Compares selected requirements versions with each other.
 *
 * @internal revisions
 * @since 1.9.6
 */

require_once("../../config.inc.php");
require_once("common.php");
require('../../third_party/diff/diff.php');
require('../../third_party/daisydiff/src/HTMLDiff.php');
require_once('reqJiraRestJsonXml.php');

define('JIRA_TECHNO_URL','https://jira.techno.ingenico.com/'); 
define('JIRA_TECHNO_URL_BROWSE',JIRA_TECHNO_URL . 'browse/'); 

$templateCfg = templateConfiguration();
testlinkInitPage($db);
$smarty = new TLSmarty();

$labels = init_labels(array("num_changes" => null,"no_changes" => null, 
					  		"diff_subtitle_req" => null, "version_short" => null,
					  		"diff_details_req" => null,"type" => null, "status" => null,
					  		"name" => null, "expected_coverage" => null,
					  		"revision_short" => null, "version_revision" => null) );



$reqMgr = new requirement_mgr($db);
$differ = new diff();
$args = init_args();
$gui = initializeGui($db,$args,$labels,$reqMgr);

if($args->add_version == 'OK'){
	if(($args->status_after != TL_REQ_STATUS_OBSOLETE) || ($args->status_before != TL_REQ_STATUS_OBSOLETE)){
		addVersionJira($db,$gui,$args,$reqMgr);
	}
    $tpl = "reqView.php?requirement_id={$args->req_id}";
	header("Location: {$tpl}");
	exit();
}else{
	compareTestLinkJira($db,$gui,$args,$differ,$reqMgr,$labels,$smarty,$templateCfg);
}

function addVersionJira($db,$gui,$args,$reqMgr){
	$usr = $_SESSION['userID'];
	$req_id = $args->req_id;
	$bb = getBareBonesReq($db,$req_id);
	$req_doc_id = $bb['req_doc_id'];
	
	$date = date('d/m/Y h:i:s', time());
	$log_message = 'Version added ' . $date . ' after comparing with JIRA User Story';
	$ret = $reqMgr->create_new_version($args->req_id,$usr,null,$log_message);
	$version = $ret['id'];

	$new_status = $args->status_after;
	if($new_status != TL_REQ_STATUS_OBSOLETE){
		$jira_req = getJiraReq($req_doc_id);
		$scope = concatSummaryDescription($jira_req['summary'],$jira_req['description']);
		$reqdoc_id = $jira_req['key'];
		$title = $jira_req['summary'];
	}else{
		$scope = false;
		$reqdoc_id = false;
		$title = false;
	}

	$reqMgr->update(
		$req_id,
		$version,
		$reqdoc_id, 
		$title,
		$scope,
		$usr, //$user_id,
		$new_status, //$status,
		TL_REQ_TYPE_USE_CASE, //$type,
        1 //$expected_coverage,
		//$node_order=null,
		//$tproject_id=null,
		//$skip_controls=0,
        //$create_revision=false,
		//$log_msg=null
		);

	if(new_status != TL_REQ_STATUS_OBSOLETE){
		$cfs = $reqMgr->get_linked_cfields(
			$args->req_id,
			$version,
			$args->tproject_id
			);
		$cfs_jira = array();
		$hash = array();
		foreach($cfs as $n => $fld){
			$idx = 'custom_field_';
			$idx .= $fld['type'];
			$idx .= '_' . $n;
			switch ($fld['name']) {
				case 'fixversions':
					$hash[$idx] = $jira_req['fixVersions'];
					break;
				case 'usurl':
					$hash[$idx] = JIRA_TECHNO_URL_BROWSE . $jira_req['key'];
					break;
				case 'epic':
					$hash[$idx] = JIRA_TECHNO_URL_BROWSE . $jira_req['Epic Link (10006)'];
					break;
			}
		}	
		$reqMgr->values_to_db($hash,$version);
	}
	
}

function compareTestLinkJira($db,$gui,$args,$differ,$reqMgr,$labels,$smarty,$templateCfg){
	$gui->leftID = ' TestLink ';
	$gui->rightID = ' JIRA ';
	//$gui->subtitle = sprintf('Differences between the latest version/revision in testlink and the User Story in JIRA Techno');
	$sbs = getItemsToCompare($gui->items);
	
	$status_before = $sbs['left_item']['status'];
		
	$gui->attrDiff = getAttrDiff($sbs['left_item'],$sbs['right_item'],$labels);
		
	$cfields = getCFToCompare($sbs,$args->tproject_id,$reqMgr);
	$gui->cfieldsDiff = null;
	if( !is_null($cfields) )
	{
		$gui->cfieldsDiff = getCFDiff($cfields,$reqMgr);
	}

	$gui->diff = array("scope" => array());
	foreach($gui->diff as $key => $val) 
	{
		// using daisydiff as diffing engine
		$diff = new HTMLDiffer();
		list($differences, $diffcount) = $diff->htmlDiff($sbs['left_item'][$key], $sbs['right_item'][$key]);
		$gui->diff[$key]["diff"] = $differences;
		$gui->diff[$key]["count"] = $diffcount;
		$gui->diff[$key]["heading"] = lang_get($key);
		
		// are there any changes? then display! if not, nothing to show here
		$additional = '';
		$msg_key = "no_changes";
		if ($gui->diff[$key]["count"] > 0) 
		{
			$msg_key = "num_changes";
			$additional = $gui->diff[$key]["count"];
		}		
		$gui->diff[$key]["message"] = sprintf($labels[$msg_key], $key, $additional);
	}

	$status_after = getJiraStatus($gui->diff,$gui->attrDiff,$gui->cfieldsDiff);
	$gui->add_new_version = 'yes';
	if($status_after == ' '){
		$status_after = $status_before;
		$gui->add_new_version = 'no';
	}

	$gui->status_before = $status_before;
	$gui->status_after = $status_after;

	$smarty->assign('gui', $gui);
	$smarty->display($templateCfg->template_dir . $templateCfg->default_template);
}

function getJiraStatus($diff,$attrDiff,$cfieldsDiff){
	$mod = false;
	$obs = false;
	$new = false;
	foreach($attrDiff as $key => $val) {
		if($key == 'status'){
			continue;
		}
		if($key == 'name'){
			if($val['rvalue'] == ''){
				$obs = true;
			}elseif(strlen($val['lvalue']<2)){
				$new = true;
			}
		}
		if($val['changed'] >0){
			$mod = true;
		}
	}
	
	foreach($diff as $key => $val) {
		if($val['count'] >0){
			$mod = true;
		}
	}

	foreach($cfieldsDiff as $key => $val) {
		if($val['changed'] >0){
			$mod = true;
		}
	}
	
	$ret = ' ';
	if($obs) {
		$ret = TL_REQ_STATUS_OBSOLETE;
	}else if($mod) {
		if($new){
			$ret = TL_REQ_STATUS_DRAFT;
		}else{
			$ret = TL_REQ_STATUS_REVIEW;
		}
	}	
	
	return $ret;
}

function getBareBonesReq($dbHandler,$reqID)
{
	$debugMsg = ' Function: ' . __FUNCTION__;
	$tables = tlObjectWithDB::getDBTables(array('requirements','nodes_hierarchy'));
	$sql = 	" /* $debugMsg */ SELECT REQ.req_doc_id, NH_REQ.name " .
			" FROM {$tables['requirements']} REQ " .
			" JOIN {$tables['nodes_hierarchy']} NH_REQ	ON  NH_REQ.id = REQ.id " .
			" WHERE REQ.id = " . intval($reqID);
			
	$bones = $dbHandler->get_recordset($sql);		

	return $bones[0];
}

function getLastVersionInfo(&$itemSet){
	$v = 0;
	$r = 0;
	$last = 0;
	foreach($itemSet as $item) 
	{
		$v1 = $item['version'];
		$r1 = $item['revision'];
		if(($v1 * 1000 + $r1) > ($v * 1000 + $r)) {
			$last = $item;
			$v = $v1;
			$r = $r1;
		}
	}
	return $last;
}

function getItemsToCompare(&$itemSet)
{
	$ret = array();
	$ret['left_item'] = getLastVersionInfo($itemSet);
	$item = $ret['left_item'];

	$scope = $ret['left_item']['scope'];
	$ret['left_item']['scope'] = $scope;
	
	$jira_req = getJiraReq($ret['left_item']['req_doc_id']);	

	$scope = concatSummaryDescription($jira_req['summary'],$jira_req['description']);
	
	$ret['right_item'] = array(
		'scope' => $scope,
		'status' => $item['status'],
		'type' => $item['type'],
		'expected_coverage' => $item['expected_coverage'],
		'item_id' => $item['item_id'],
		'name' => substr($jira_req['summary'],0,100),
		'fixversions' => $jira_req['fixVersions'],
		'epic' => JIRA_TECHNO_URL_BROWSE . $jira_req['Epic Link (10006)'],
	);
	return $ret;
}

function getJiraReq($req){
	$itsClient = getItsClient();
	$issue = $itsClient->getIssue($req); 
	if(isset($issue->key)){
		$items = getIssueEssentials($issue);
	}else{
		$items = [
			'key' => $req,
			'id' => 0,
			'summary' => '',
			'description' => '',
			'Epic Link (10006)' => '',
			'fixVersions' => ''
		];
	}
	return $items;
}

function getCFToCompare($sides,$tprojectID,&$reqMgr)
{
	$cfields = array('left_side' => array('key' => 'left_item', 'value' => null), 
		'right_side' => array('key' => 'right_item', 'value' => null));
		
	$target_id = $sides['left_item']['item_id'];
	$cfs = $reqMgr->get_linked_cfields(null,$target_id,$tprojectID);
	
	foreach($cfs as $n => $fld){
		$cfields['left_side']['value'][$n] = $fld;
		$cfields['right_side']['value'][$n]['name'] = $fld['name'];
		$cfields['right_side']['value'][$n]['label'] = $fld['label'];
		switch ($fld['name']) {
			case 'fixversions':
				$cfields['right_side']['value'][$n]['value'] = $sides['right_item']['fixversions'];
				break;
			case 'usurl':
				$cfields['right_side']['value'][$n]['value'] = $cfields['left_side']['value'][$n]['value'];
				break;
			case 'epic':
				$cfields['right_side']['value'][$n]['value'] = $sides['right_item']['epic'];
				break;
		}
	}
	return $cfields;
}

/**
 * @internal revisions
 * 20101211 - franciscom -  use show_custom_fields_without_value
 */
function getCFDiff($cfields,&$reqMgr)
{
	// echo __FUNCTION__;
	$cmp = null;
	
	// Development Note
	// All versions + revisions (i.e. child items) have the same qty of linked CF
	// => both arrays will have same size()
	//
	// This is because to get cfields we look only to CF enabled for node type.
	$cfieldsLeft = $cfields['left_side']['value'];
	$cfieldsRight = $cfields['right_side']['value'];
	if( !is_null($cfieldsLeft) )
	{
		$key2loop = array_keys($cfieldsLeft);
		$cmp = array();
		$type_code = $reqMgr->cfield_mgr->get_available_types();
		$key2convert = array('lvalue','rvalue');
		
		$formats = array('date' => config_get( 'date_format'));
		$cfg = config_get('gui');
		$cfCfg = config_get('custom_fields');
		foreach($key2loop as $cf_key)
		{
			// $cfg->show_custom_fields_without_value 
			// false => At least one value has to be <> NULL to include on comparsion results
			// 
		    if( $cfCfg->show_custom_fields_without_value == true ||
		    	($cfCfg->show_custom_fields_without_value == false &&
		    	 ( (!is_null($cfieldsRight) && !is_null($cfieldsRight[$cf_key]['value'])) ||
		    	   (!is_null($cfieldsLeft) && !is_null($cfieldsLeft[$cf_key]['value'])) )
		      	) 
		      )		 
		    {	  
				$cmp[$cf_key] = array('label' => htmlspecialchars($cfieldsLeft[$cf_key]['label']),
				                      'lvalue' => $cfieldsLeft[$cf_key]['value'],
				                      'rvalue' => !is_null($cfieldsRight) ? $cfieldsRight[$cf_key]['value'] : null,
				                      'changed' => $cfieldsLeft[$cf_key]['value'] != $cfieldsRight[$cf_key]['value']);
			
				if($type_code[$cfieldsLeft[$cf_key]['type']] == 'date' ||
				   $type_code[$cfieldsLeft[$cf_key]['type']] == 'datetime') 
				{
					$t_date_format = str_replace("%","",$formats['date']); // must remove %
					foreach($key2convert as $fx)
					{
						if( ($doIt = ($cmp[$cf_key][$fx] != null)) )
						{
							switch($type_code[$cfieldsLeft[$cf_key]['type']])
							{
								case 'datetime':
    	    				            $t_date_format .= " " . $cfg->custom_fields->time_format;
								break ;
							}
						}	                       
						if( $doIt )
						{
						  	$cmp[$cf_key][$fx] = date($t_date_format,$cmp[$cf_key][$fx]);
						}
					}
				} 
			} // mega if
		}  // foreach		
	}
	return count($cmp) > 0 ? $cmp : null;	
}

function init_args()
{
	$args = new stdClass();

	$args->req_id = isset($_REQUEST['requirement_id']) ? $_REQUEST['requirement_id'] : 0;
	$args->add_version = isset($_REQUEST['add_version']) ? $_REQUEST['add_version'] : '';
	$args->status_after = isset($_REQUEST['status_after']) ? $_REQUEST['status_after'] : '';
    $args->tproject_id = isset($_SESSION['testprojectID']) ? $_SESSION['testprojectID'] : 0;
	$diffEngineCfg = config_get("diffEngine");
	$args->context = null;
	if( !isset($_REQUEST['context_show_all'])) 
	{
		$args->context = (isset($_REQUEST['context']) && is_numeric($_REQUEST['context'])) ? $_REQUEST['context'] : $diffEngineCfg->context;
	}
	return $args;
}

function initializeGui(&$dbHandler,&$argsObj,$lbl,&$reqMgr)
{
	$reqCfg = config_get('req_cfg');
	$guiObj = new stdClass();
    $guiObj->items = $reqMgr->get_history($argsObj->req_id,array('output' => 'array','decode_user' => true));
	
	// Truncate log message
	if( $reqCfg->log_message_len > 0 )
	{	
		$loop2do = count($guiObj->items);
		for($idx=0; $idx < $loop2do; $idx++)
		{
			if( strlen($guiObj->items[$idx]['log_message']) > $reqCfg->log_message_len )
			{
				$guiObj->items[$idx]['log_message'] = substr($guiObj->items[$idx]['log_message'],0,$reqCfg->log_message_len) . '...';
			}
			// 20101215 - Julian: removed nl2br() to avoid multiline on compare page. tooltip shows better formatting.
			$guiObj->items[$idx]['log_message'] = htmlspecialchars($guiObj->items[$idx]['log_message']);
		}
	} 
	$guiObj->req_id = $argsObj->req_id;
	$guiObj->context = $argsObj->context;
	$guiObj->add_version = $argsObj->add_version;
	$guiObj->version_short = $lbl['version_short'];
	$guiObj->diff = null;
	return $guiObj;
}

function getAttrDiff($leftSide,$rightSide,$labels)
{
	$req_cfg = config_get('req_cfg'); 
	$key2loop = array(
		'name' => null, 
		//'status' => 'status_labels',
		//'type' => 'type_labels',
		//'expected_coverage' => null
	);
	foreach($key2loop as $fkey => $lkey)
	{
		// Need to decode
		$cmp[$fkey] = array('label' => htmlspecialchars($labels[$fkey]),
		                   'lvalue' => $leftSide[$fkey],'rvalue' => $rightSide[$fkey],
		                   'changed' => $leftSide[$fkey] != $rightSide[$fkey]);
		             
		if( !is_null($lkey) )
		{
			$decode = $req_cfg->$lkey;
			$cmp[$fkey]['lvalue'] = lang_get($decode[$cmp[$fkey]['lvalue']]);
			$cmp[$fkey]['rvalue'] = lang_get($decode[$cmp[$fkey]['rvalue']]);
		}                   
	}		
	return $cmp;	
}
?>